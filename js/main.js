// Generated by CoffeeScript 1.6.3
var Game;

Game = (function() {
  Game.SCREEN_WIDTH = 320;

  Game.SCREEN_HEIGHT = 288;

  Game.GRID_SIZE = 32;

  function Game() {
    var _this = this;
    this.assetManager = new AssetManager();
    this.assetManager.loadImage('pokemon-tiles.png');
    this.assetManager.loadImage('pokemon-dialog-box.png');
    this.assetManager.loadTilemap('pokemon-level.json');
    this.assetManager.start(function() {
      var camera, dialogBox, i, npc, player, _i;
      _this.entityManager = new EntityManager(window.components);
      _this.cq = cq(Game.SCREEN_WIDTH, Game.SCREEN_HEIGHT).appendTo('.gameboy');
      player = _this.entityManager.createEntityWithComponents([
        ['PlayerComponent', {}], [
          'PixelPositionComponent', {
            x: 4 * Game.GRID_SIZE,
            y: 4 * Game.GRID_SIZE
          }
        ], [
          'GridPositionComponent', {
            col: 4,
            row: 4,
            gridSize: Game.GRID_SIZE
          }
        ], [
          'ShapeRendererComponent', {
            width: Game.GRID_SIZE,
            height: Game.GRID_SIZE,
            type: 'rectangle'
          }
        ], [
          'ColorComponent', {
            color: '#33ff33'
          }
        ], [
          'PokemonMovementComponent', {
            speed: 0.15
          }
        ], ['ActionInputComponent', {}], ['KeyboardArrowsInputComponent', {}], ['CameraFollowsComponent', {}], ['CollidableComponent', {}], ['DirectionComponent', {}]
      ]);
      camera = _this.entityManager.createEntityWithComponents([
        ['CameraComponent', {}], [
          'PixelPositionComponent', {
            x: 0,
            y: 0
          }
        ], [
          'GridPositionComponent', {
            col: 0,
            row: 0
          }
        ]
      ]);
      dialogBox = _this.entityManager.createEntityWithComponents([
        ['DialogBoxComponent', {}], [
          'DialogBoxTextComponent', {
            text: "OAK: It's unsafe!\nWild Pokemon live\nin the tall grass!"
          }
        ], [
          'ActionInputComponent', {
            enabled: false
          }
        ], ['KeyboardArrowsInputComponent', {}]
      ]);
      _this.initializeMap('pokemon-level.json');
      for (i = _i = 0; _i <= 3; i = ++_i) {
        npc = _this.entityManager.createEntityWithComponents([
          [
            'PixelPositionComponent', {
              x: Math.round(Math.random() * Game.SCREEN_WIDTH / Game.GRID_SIZE) * Game.GRID_SIZE,
              y: Math.round(Math.random() * Game.SCREEN_HEIGHT / Game.GRID_SIZE) * Game.GRID_SIZE
            }
          ], [
            'GridPositionComponent', {
              col: 4,
              row: 4,
              gridSize: Game.GRID_SIZE
            }
          ], [
            'ShapeRendererComponent', {
              width: Game.GRID_SIZE,
              height: Game.GRID_SIZE,
              type: 'rectangle'
            }
          ], [
            'ColorComponent', {
              color: 'red'
            }
          ], [
            'PokemonMovementComponent', {
              speed: 0.15
            }
          ], ['ActionInputComponent', {}], ['RandomArrowsInputComponent', {}], ['CollidableComponent', {}], ['DirectionComponent', {}]
        ]);
      }
      _this.tilemapRenderingSystem = new TilemapRenderingSystem(_this.cq);
      _this.canvasRenderSystem = new CanvasRenderSystem(_this.cq);
      _this.dialogRenderingSystem = new DialogRenderingSystem(_this.cq);
      _this.inputSystem = new InputSystem();
      _this.randomInputSystem = new RandomInputSystem();
      _this.movementSystem = new MovementSystem();
      _this.tweenSystem = new TweenSystem();
      _this.pokemonMovementSystem = new PokemonMovementSystem();
      _this.cameraFollowingSystem = new CameraFollowingSystem();
      return _this.cq.framework({
        onstep: function(delta, time) {
          _this.randomInputSystem.update(delta, _this.entityManager, _this.assetManager);
          _this.movementSystem.update(delta, _this.entityManager, _this.assetManager);
          _this.pokemonMovementSystem.update(delta, _this.entityManager, _this.assetManager);
          _this.tweenSystem.update(delta, _this.entityManager, _this.assetManager);
          _this.cameraFollowingSystem.update(delta, _this.entityManager, _this.assetManager);
          return _this.dialogRenderingSystem.update(delta, _this.entityManager, _this.assetManager);
        },
        onrender: function(delta, time) {
          _this.cq.clear('white');
          _this.tilemapRenderingSystem.draw(delta, _this.entityManager, _this.assetManager);
          _this.canvasRenderSystem.draw(delta, _this.entityManager, _this.assetManager);
          return _this.dialogRenderingSystem.draw(delta, _this.entityManager, _this.assetManager);
        },
        onresize: function(width, height) {},
        onousedown: function(x, y) {},
        onmouseup: function(x, y) {},
        onmousemove: function(x, y) {},
        onmousewheel: function(delta) {},
        ontouchstart: function(x, y, touches) {},
        ontouchend: function(x, y, touches) {},
        ontouchmove: function(x, y, touches) {},
        onkeydown: function(key) {
          return _this.inputSystem.updateKey(key, true, _this.entityManager);
        },
        onkeyup: function(key) {
          _this.inputSystem.updateKey(key, false, _this.entityManager);
          if (key === 'space') {
            localStorage.setItem('save', _this.entityManager.save());
          }
          if (key === 'escape') {
            return _this.entityManager.load(localStorage.getItem('save'));
          }
        },
        ongamepaddown: function(button, gamepad) {},
        ongamepadup: function(button, gamepad) {},
        ongamepadmove: function(xAxis, yAxis, gamepad) {},
        ondropimage: function(image) {}
      });
    });
  }

  Game.prototype.initializeMap = function(dataUrl) {
    var i, layer, mapData, _i, _len, _ref, _results;
    mapData = this.assetManager.assets['pokemon-level.json'];
    _ref = mapData.layers;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      layer = _ref[i];
      if (i === 3 || i === 5) {
        continue;
      }
      if (layer.properties.layertype === 'visible') {
        _results.push(layer = this.entityManager.createEntityWithComponents([
          [
            'TilemapVisibleLayerComponent', {
              tileData: layer,
              tileImageUrl: 'pokemon-tiles.png',
              tileWidth: mapData.tilewidth,
              tileHeight: mapData.tileheight,
              zIndex: i
            }
          ]
        ]));
      } else {
        _results.push(layer = this.entityManager.createEntityWithComponents([
          [
            'TilemapCollisionLayerComponent', {
              tileData: layer
            }
          ]
        ]));
      }
    }
    return _results;
  };

  return Game;

})();

window.game = new Game();
