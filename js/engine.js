// Generated by CoffeeScript 1.6.3
var EntityManager, genUUID;

Number.prototype.clamp = function(min, max) {
  return Math.min(Math.max(this, min), max);
};

genUUID = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);
    });;
};

EntityManager = (function() {
  function EntityManager(components) {
    this.components = components;
    this.id = genUUID();
    this.componentStores = {};
  }

  EntityManager.prototype.createEntity = function() {
    return genUUID();
  };

  EntityManager.prototype.addComponent = function(entity, componentName, args) {
    var component, key, store, value;
    if (!(componentName in this.componentStores)) {
      this.componentStores[componentName] = {};
    }
    store = this.componentStores[componentName];
    component = JSON.parse(JSON.stringify(this.components[componentName]));
    for (key in args) {
      value = args[key];
      if (!(key in component)) {
        console.log('unknown component variable: ' + key);
      }
      component[key] = value;
    }
    component._name = componentName;
    if (entity in store) {
      return store[entity].push(component);
    } else {
      return store[entity] = [component];
    }
  };

  EntityManager.prototype.removeComponent = function(entity, component) {
    var components, idx, store;
    if (!(component._name in this.componentStores)) {
      return null;
    }
    store = this.componentStores[component._name];
    components = store[entity];
    idx = components.indexOf(component);
    if (idx > -1) {
      component = components.splice(idx, 1);
      if (components.length === 0) {
        delete store[entity];
      }
      return component;
    }
    return null;
  };

  EntityManager.prototype.getSingletonEntityWithComponent = function(componentName) {
    var entities;
    entities = this.getEntitiesWithComponent(componentName);
    if (entities.length === 0) {
      return null;
    } else if (entities.length > 1) {
      throw 'Multiple instances of singleton component!';
    } else {
      return entities[0];
    }
  };

  EntityManager.prototype.createEntityWithComponents = function(components) {
    var args, componentName, entity, _i, _len, _ref;
    entity = this.createEntity();
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      _ref = components[_i], componentName = _ref[0], args = _ref[1];
      this.addComponent(entity, componentName, args);
    }
    return entity;
  };

  EntityManager.prototype.hasComponent = function(entity, componentName) {
    var store;
    if (!(componentName in this.componentStores)) {
      return false;
    } else {
      store = this.componentStores[componentName];
      return entity in store && store[entity].length > 0;
    }
  };

  EntityManager.prototype.getEntitiesWithComponent = function(componentName) {
    if (componentName in this.componentStores) {
      return Object.keys(this.componentStores[componentName]);
    } else {
      return [];
    }
  };

  EntityManager.prototype.getEntitiesWithComponents = function(componentNames) {
    var allEntities, componentName, count, entity, numComponents, result, _i, _j, _len, _len1, _ref;
    allEntities = {};
    numComponents = componentNames.length;
    for (_i = 0, _len = componentNames.length; _i < _len; _i++) {
      componentName = componentNames[_i];
      _ref = this.getEntitiesWithComponent(componentName);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        entity = _ref[_j];
        if (entity in allEntities) {
          allEntities[entity]++;
        } else {
          allEntities[entity] = 1;
        }
      }
    }
    result = [];
    for (entity in allEntities) {
      count = allEntities[entity];
      if (count === numComponents) {
        result.push(entity);
      }
    }
    return result;
  };

  EntityManager.prototype.getComponent = function(entity, componentName) {
    var components, store;
    if (!(componentName in this.componentStores)) {
      return null;
    }
    store = this.componentStores[componentName];
    components = store[entity];
    if (components && components.length > 0) {
      return components[0];
    } else {
      return null;
    }
  };

  EntityManager.prototype.getComponents = function(entity, componentName) {
    var components, store;
    if (!(componentName in this.componentStores)) {
      return [];
    }
    store = this.componentStores[componentName];
    components = store[entity];
    if (components) {
      return components;
    } else {
      return [];
    }
  };

  EntityManager.prototype.entityHasComponent = function(entity, componentName) {
    return !!this.getComponent(entity, componentName);
  };

  EntityManager.prototype.iterateEntitiesWithComponents = function(componentNames) {
    var componentName, entity, result, results, _i, _j, _len, _len1, _ref;
    results = [];
    _ref = this.getEntitiesWithComponents(componentNames);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      result = [entity];
      for (_j = 0, _len1 = componentNames.length; _j < _len1; _j++) {
        componentName = componentNames[_j];
        result.push(this.getComponent(entity, componentName));
      }
      results.push(result);
    }
    return results;
  };

  EntityManager.prototype.save = function() {
    return JSON.stringify(this.componentStores);
  };

  EntityManager.prototype.load = function(jsonString) {
    return this.componentStores = JSON.parse(jsonString);
  };

  return EntityManager;

})();
