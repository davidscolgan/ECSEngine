// Generated by CoffeeScript 1.6.3
var EntityManager, EventManager, genUUID;

Number.prototype.clamp = function(min, max) {
  return Math.min(Math.max(this, min), max);
};

genUUID = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);
    });;
};

EventManager = (function() {
  function EventManager() {
    this.queue = [];
    this.listeners = {};
    this.oneTimeListeners = {};
  }

  EventManager.prototype._addEvent = function(eventName, entity, callback, listeners) {
    if (!(entity in listeners)) {
      listeners[entity] = {};
    }
    if (!(eventName in listeners[entity])) {
      listeners[entity][eventName] = [];
    }
    return listeners[entity][eventName].push(callback);
  };

  EventManager.prototype.subscribeOnce = function(eventName, entity, callback) {
    return this._addEvent(eventName, entity, callback, this.oneTimeListeners);
  };

  EventManager.prototype.subscribe = function(eventName, entity, callback) {
    return this._addEvent(eventName, entity, callback, this.listeners);
  };

  EventManager.prototype.trigger = function(eventName, entity, data) {
    return this.queue.push([eventName, entity, data]);
  };

  EventManager.prototype.pump = function() {
    var callback, currentQueue, data, entity, eventName, list, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    _results = [];
    while (true && true || true) {
      currentQueue = this.queue;
      this.queue = [];
      for (_i = 0, _len = currentQueue.length; _i < _len; _i++) {
        _ref = currentQueue[_i], eventName = _ref[0], entity = _ref[1], data = _ref[2];
        if (entity in this.listeners) {
          if (eventName in this.listeners[entity]) {
            _ref1 = this.listeners[entity][eventName];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              callback = _ref1[_j];
              callback(entity, data);
            }
          }
        }
        if (entity in this.oneTimeListeners) {
          if (eventName in this.oneTimeListeners[entity]) {
            _ref2 = this.oneTimeListeners[entity][eventName];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              callback = _ref2[_k];
              list = this.oneTimeListeners[entity][eventName];
              callback(entity, data);
            }
            this.oneTimeListeners[entity][eventName] = [];
          }
        }
      }
      if (this.queue.length === 0) {
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return EventManager;

})();

EntityManager = (function() {
  function EntityManager(components) {
    this.components = components;
    this.id = genUUID();
    this.componentStores = {};
  }

  EntityManager.prototype.createEntity = function() {
    return genUUID();
  };

  EntityManager.prototype.addComponent = function(entity, componentName, args) {
    var component, key, store, value;
    if (!(componentName in this.componentStores)) {
      this.componentStores[componentName] = {};
    }
    store = this.componentStores[componentName];
    component = JSON.parse(JSON.stringify(this.components[componentName]));
    for (key in args) {
      value = args[key];
      if (!(key in component)) {
        console.log('unknown component variable: ' + key);
      }
      component[key] = value;
    }
    component._name = componentName;
    if (entity in store) {
      store[entity].push(component);
    } else {
      store[entity] = [component];
    }
    return component;
  };

  EntityManager.prototype.removeComponent = function(entity, component) {
    var components, idx, store;
    if (!(component._name in this.componentStores)) {
      return null;
    }
    store = this.componentStores[component._name];
    components = store[entity];
    idx = components.indexOf(component);
    if (idx > -1) {
      component = components.splice(idx, 1);
      if (components.length === 0) {
        delete store[entity];
      }
      return component;
    }
    return null;
  };

  EntityManager.prototype.createEntityWithComponents = function(components) {
    var args, componentName, entity, _i, _len, _ref;
    entity = this.createEntity();
    for (_i = 0, _len = components.length; _i < _len; _i++) {
      _ref = components[_i], componentName = _ref[0], args = _ref[1];
      this.addComponent(entity, componentName, args);
    }
    return entity;
  };

  EntityManager.prototype.getEntitiesHavingComponent = function(componentName) {
    if (componentName in this.componentStores) {
      return Object.keys(this.componentStores[componentName]);
    } else {
      return [];
    }
  };

  EntityManager.prototype.getEntitiesHavingComponents = function(componentNames) {
    var allEntities, componentName, count, entity, numComponents, result, _i, _j, _len, _len1, _ref;
    allEntities = {};
    numComponents = componentNames.length;
    for (_i = 0, _len = componentNames.length; _i < _len; _i++) {
      componentName = componentNames[_i];
      _ref = this.getEntitiesHavingComponent(componentName);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        entity = _ref[_j];
        if (entity in allEntities) {
          allEntities[entity]++;
        } else {
          allEntities[entity] = 1;
        }
      }
    }
    result = [];
    for (entity in allEntities) {
      count = allEntities[entity];
      if (count === numComponents) {
        result.push(entity);
      }
    }
    return result;
  };

  EntityManager.prototype.getComponent = function(entity, componentName) {
    var components, store;
    if (!(componentName in this.componentStores)) {
      return null;
    }
    store = this.componentStores[componentName];
    components = store[entity];
    if (components && components.length > 0) {
      return components[0];
    } else {
      return null;
    }
  };

  EntityManager.prototype.getComponents = function(entity, componentName) {
    var components, store;
    if (!(componentName in this.componentStores)) {
      return [];
    }
    store = this.componentStores[componentName];
    components = store[entity];
    if (components) {
      return components;
    } else {
      return [];
    }
  };

  EntityManager.prototype.entityHasComponent = function(entity, componentName) {
    return !!this.getComponent(entity, componentName);
  };

  EntityManager.prototype.iterateEntitiesAndComponents = function(componentNames) {
    var componentName, entity, result, results, _i, _j, _len, _len1, _ref;
    results = [];
    _ref = this.getEntitiesHavingComponents(componentNames);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      result = [entity];
      for (_j = 0, _len1 = componentNames.length; _j < _len1; _j++) {
        componentName = componentNames[_j];
        result.push(this.getComponent(entity, componentName));
      }
      results.push(result);
    }
    return results;
  };

  EntityManager.prototype.getFirstEntityAndComponents = function(componentNames) {
    var componentName, entities, entity, result, _i, _len;
    entities = this.getEntitiesHavingComponents(componentNames);
    if (entities.length > 0) {
      entity = entities[0];
      result = [entity];
      for (_i = 0, _len = componentNames.length; _i < _len; _i++) {
        componentName = componentNames[_i];
        result.push(this.getComponent(entity, componentName));
      }
      return result;
    } else {
      return [];
    }
  };

  EntityManager.prototype.save = function() {
    return JSON.stringify(this.componentStores);
  };

  EntityManager.prototype.load = function(jsonString) {
    return this.componentStores = JSON.parse(jsonString);
  };

  return EntityManager;

})();
